<?php

namespace App\Http\Controllers\{{modelDir}};

use App\Http\Controllers\Api\ApiController;

use App\Models\{{modelDir}}\{{modelName}};
use App\Http\Requests\{{modelDir}}\{{modelName}}Request;
use App\Http\Resources\{{modelDir}}\{{modelName}}Resource;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class {{modelName}}Controller extends ApiController
{
    public function index(){

        // $this->authorize("viewAny", {{modelName}}::class);

        $datas = {{modelName}}::get();

        $datas = (count($datas) == 0 ? ["message" => "Record not Found"] : {{modelName}}Resource::collection($datas));

        return response()->json($datas , Response::HTTP_OK);
    }

    public function store({{modelName}}Request $request){

        // $this->authorize("create", {{modelName}}::class);
        
        $data = $request->validated();

        $data = {{modelName}}::create($data);

        $data = new {{modelName}}Resource($data);

        return response()->json($data , Response::HTTP_OK);
    }

    public function show({{modelName}} ${{modelCamelCaseName}}){

        // $this->authorize("view", {{modelName}}::class);

        $data = new {{modelName}}Resource(${{modelCamelCaseName}});

        return response()->json($data , Response::HTTP_OK);
    }

    public function update({{modelName}}Request $request,{{modelName}} ${{modelCamelCaseName}}){

        // $this->authorize("update", {{modelName}}::class);

        $data = $request->validated();

        ${{modelCamelCaseName}}->update($data); 

        $data = new {{modelName}}Resource(${{modelCamelCaseName}});
        
        return response()->json($data , Response::HTTP_OK);
    }

    public function destroy({{modelName}} ${{modelCamelCaseName}}){

        // $this->authorize("delete", {{modelName}}::class);

        ${{modelCamelCaseName}}->delete();

        $data = ["message" => "Data Delete successfully !!!"];

        return response()->json($data , Response::HTTP_OK);
    }

    public function restore($id){

        // only super admin can access, and check with middleware at the __construct function

        $data = {{modelName}}::onlyTrashed()->findOrFail($id); 

        $data->restore();

        $data = ["message" => "Data Restore successfully !!!"];

        return response()->json($data , Response::HTTP_OK);
    }

    public function forceDestroy($id){

        // only super admin can access, and check with middleware at the __construct function

        $data = {{modelName}}::withTrashed()->findOrFail($id);

        $data->forceDelete();

        $data = ['message' => "Data Force Delete Successfully !!!"];

        return response()->json($data , Response::HTTP_OK);
    }
}